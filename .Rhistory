install.packages("xlsx")
R CMD javareconf
install.packages("xlsx")
install.packages("xlsx")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
myapp <- oauth_app("github", "821a0bc483115e1005ba")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
getwd
getwd()
gtoken <- config(token = github_token)
github_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "821a0bc483115e1005ba")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "d06a9fc1b253082d8cb1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "d06a9fc1b253082d8cb1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "821a0bc483115e1005ba")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "d06a9fc1b253082d8cb1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.package("httpuv")
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gitbub_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
my app <- oauth_app("github",key="d06a9fc1b253082d8cb1",secret = "c957c081341e863dd4c6a0a76eb66c4edd476d21")
my_app <- oauth_app("github",key="d06a9fc1b253082d8cb1",secret = "c957c081341e863dd4c6a0a76eb66c4edd476d21")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
my_app <- oauth_app("github",key="d06a9fc1b253082d8cb1",secret = "c957c081341e863dd4c6a0a76eb66c4edd476d21")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
github_token
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github", "d06a9fc1b253082d8cb1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken <- config(token = github_token)
gtoken
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req
install.packages("xml")
install.packages("XML")
library(XML)
fileUrL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrL,useInternal=TRUE)
rootNode <- xmlRoot(doc)
rootNode
# Installing package
install.packages("XML")
library(XML)
# Loading particular files
fileUrL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrL,useInternal=TRUE)
rootNode <- xmlRoot(doc)
# Extracting elements
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[2]][[3]]
install.packages("XML")
# Installing package
#install.packages("XML")
#library(XML)
# Loading particular files
fileUrL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrL,useInternal=TRUE)
rootNode <- xmlRoot(doc)
# Extracting elements
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[2]][[3]]
# Installing package
#install.packages("XML")
#library(XML)
# Loading particular files
fileUrL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrL,useInternal=TRUE)
rootNode <- xmlRoot(doc)
# Extracting elements
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[2]][[3]]
# Programatic extraction
xmlSApply(rootNode,xmlValue)
# Installing package
#install.packages("XML")
#library(XML)
# Loading particular files
fileUrL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrL,useInternal=TRUE)
rootNode <- xmlRoot(doc)
# Extracting elements
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[2]][[3]]
# Programatic extraction
# Extract all values
xmlSApply(rootNode,xmlValue)
# Extract all elements titled name
xpathSApply(rootNode,"//name",xmlValue)
# Installing package
#install.packages("XML")
#library(XML)
# Loading particular files
fileUrL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrL,useInternal=TRUE)
rootNode <- xmlRoot(doc)
# Extracting elements
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[2]][[3]]
# Programatic extraction
# Extract all values
xmlSApply(rootNode,xmlValue)
# Extract all elements titled name
xpathSApply(rootNode,"//name",xmlValue)
# Extract all elements titled price
xpathSApply(rootNode,"//price",xmlValue)
install.packages("XML")
library(XML)
fileURL <- "http://www.bbc.co.uk/news/technology/"
doc <- htmlTreeParse(fileURL,useInternal=TRUE)
teams <- xpathSApply(doc,"//div[@class='data-table]",xmlValue)
teams <- xpathSApply(doc,"//div[@class='data-table']",xmlValue)
teams
teams <- xpathSApply(doc,"//div[@class="data-table"]",xmlValue)
teams <- xpathSApply(doc,"//div[@class="'data-table'"]",xmlValue)
teams <- xpathSApply(doc,"//div[@class='data-table']",xmlValue)
teams1 <- xpathSApply(doc,"//div",xmlValue)
teams2 <- xpathSApply(doc,"//div[@class='data-table']",xmlValue)
teams1
teams[91]
teams[[91]]
teams1[[91]]
teams1[91]
teams1 <- xpathSApply(doc,"//div",xmlValue)
teams2 <- xpathSApply(doc,"//div[@class='data-table']",xmlValue)
teams1
class(teams1)
head(teams1)
teams1[1]
teams1[3]
teams1[4]
teams1[6]
install.packages("RCurl")
install.packages("twitteR")
library(RCurl)
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
library(twitteR)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
apiKey <- "jPvOYugmOtJDDCAsSRAWGpBQf"
apiSecret <- "1Dnm9A4L35YpAaSJr83tbHNrDWbjkftX08HS65pMFaWfQfgWMc"
twitCred <- OAuthFactory$new(
consumerKey = apiKey,
consumerSecret = apiSecret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL
)
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
registerTwitterOAuth(twitCred)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
apiKey <- "fD0yNoeTcRyan2hF4cbVSgJdW"
apiSecret <- "Gv0HiAwWLo5nuZnC3SwCeWUHY7QH70ALHhhPAp8ILHIzNEx0Oz"
twitCred <- OAuthFactory$new(
consumerKey = apiKey,
consumerSecret = apiSecret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL
)
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
registerTwitterOAuth(twitCred)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
apiKey <- "fD0yNoeTcRyan2hF4cbVSgJdW"
apiSecret <- "Gv0HiAwWLo5nuZnC3SwCeWUHY7QH70ALHhhPAp8ILHIzNEx0Oz"
twitCred <- OAuthFactory$new(
consumerKey = apiKey,
consumerSecret = apiSecret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL
)
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
registerTwitterOAuth(twitCred)
?system.file
library(twitteR)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
apiKey <- "fD0yNoeTcRyan2hF4cbVSgJdW"
apiSecret <- "Gv0HiAwWLo5nuZnC3SwCeWUHY7QH70ALHhhPAp8ILHIzNEx0Oz"
twitCred <- OAuthFactory$new(
consumerKey = apiKey,
consumerSecret = apiSecret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL
)
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
registerTwitterOAuth(twitCred)
When complete, record the PIN given to you and provide it here:
Error: Authorization Required
> registerTwitterOAuth(twitCred)
When complete, record the PIN given to you and provide it here:
Error: Authorization Required
> registerTwitterOAuth(twitCred)2217522
library(twitteR)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
apiKey <- "fD0yNoeTcRyan2hF4cbVSgJdW"
apiSecret <- "Gv0HiAwWLo5nuZnC3SwCeWUHY7QH70ALHhhPAp8ILHIzNEx0Oz"
twitCred <- OAuthFactory$new(
consumerKey = apiKey,
consumerSecret = apiSecret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL
)
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
registerTwitterOAuth(twitCred)
2217522
library(twitteR)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
apiKey <- "fD0yNoeTcRyan2hF4cbVSgJdW"
apiSecret <- "Gv0HiAwWLo5nuZnC3SwCeWUHY7QH70ALHhhPAp8ILHIzNEx0Oz"
twitCred <- OAuthFactory$new(
consumerKey = apiKey,
consumerSecret = apiSecret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL
)
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
registerTwitterOAuth(twitCred)
twitCred$handshake(
+   cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
+ )
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
twitCred$handshake(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
registerTwitterOAuth(twitCred)
mh370 <- searchTwitter("#PrayForMH370", since = "2014-03-08", until = "2014-03-20", n = 1000)
mh370
mh370 <- searchTwitter("#PrayForMH370", since = "2014-03-08", until = "2014-03-20", n = 1000)
FIFA<-searchTwitter("#WorldCup", n=60)
FIFA
library
(datasets)
library(datasets)
hist(airquality$Ozone)
?
fe
ls()
airquality
airquality$ozone
airquality$Ozone
head(airquality)
head(airquality,10)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
head(airquality,10)
boxplot(Ozone ~ Month, airquality, xlab =
"Month"
, ylab =
"Ozone (ppb)"
)
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(
4
,
1
))
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
?Devices
pdf(file =
"myplot.pdf"
)  ]
pdf(file =
"myplot.pdf"
)
with(faithful, plot(eruptions, waiting))
title(main =
"Old Faithful Geyser data"
)
dev.off()
pwd()
pwd
getwd()
dev.cur()
setwd("/home/smeths/Documents/development/rProgramming/Coursera/Reproducible Research/Week 2/Assignment 1 Upload Version/RepData_PeerAssessment1/")
knitr2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
library(knitr)
library(markdown)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
